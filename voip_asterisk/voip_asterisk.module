<?php
// $Id$

/**
 * @file
 * Adds support for sending VoIP requests to Asterisk servers.
 */

//-----------------------------------------------------------------------------
// Include files
//-----------------------------------------------------------------------------
foreach (array('voip_asterisk.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . $file);
}


//-----------------------------------------------------------------------------
// Public functions
//-----------------------------------------------------------------------------

/**
 * Implementation of hook_voip_server_info().
 */
function voip_asterisk_voip_server_info() {
  return array(
    'asterisk' => array(
      'name' => 'Asterisk',
      'configure form' => 'voip_asterisk_admin_form',
      'send' => 'voip_asterisk_send',
    ),
  );
}

function voip_asterisk_admin_form($configuration) {
  $form['voip_asterisk_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Asterisk server URL'),
    '#description' => t("IP address or URL (with no 'http://', 'https://' or the like) of the Asterisk server"),
    '#default_value' => ($configuration['voip_asterisk_host']?$configuration['voip_asterisk_host']:'127.0.0.1'),
  );
  $form['voip_asterisk_port'] = array(
    '#type' => 'textfield',
    '#title' => t('AMI port'),
    '#description' => t('The port used by the Asterisk Manager Interface. Asterisk uses 5038 by default.'),
    '#size' => 4,
    '#maxlength' => 4,
    '#default_value' => ($configuration['voip_asterisk_port']?$configuration['voip_asterisk_port']:'5038'),
  );
  $form['voip_asterisk_user'] = array(
    '#type' => 'textfield',
    '#title' => t('AMI user'),
    '#description' => t('The username associated with the Asterisk Manager Interface. It has to match the one in manager.conf'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => $configuration['voip_asterisk_user'],
  );
  $form['voip_asterisk_password'] = array(
    '#type' => 'textfield',
    '#title' => t('AMI password'),
    '#description' => t('The password associated with the Asterisk Manager Interface. It has to match the one in manager.conf'),
    '#size' => 30,
    '#maxlength' => 64,
    '#default_value' => $configuration['voip_asterisk_password'],
  );
  $form['voip_asterisk_cid_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Caller id name'),
    '#description' => t('Caller id name to be used in Voip Drupal calls.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => ($configuration['voip_asterisk_cid_name']?$configuration['voip_asterisk_cid_name']:'Voip Drupal'),
  );
  $form['voip_asterisk_cid_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Caller id number'),
    '#description' => t('Caller id number to be used in Voip Drupal calls.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => ($configuration['voip_asterisk_cid_name']?$configuration['voip_asterisk_cid_number']:'1234567890'),
  );

  return $form;
}

/**
 * Validates the submission of the configuration form.
 */
function voip_asterisk_admin_form_validate($form, &$form_state) {

  // TODO: validate syntax for url, port fields

  // Send a test request to validate the configuration of the Asterisk connection
  $values = $form_state['values'];
/****
  $server_config = array(
    'ami_host' => $values['voip_asterisk_host'],
    'ami_port' => $values['voip_asterisk_port'],
    'ami_user' => $values['voip_asterisk_user'],
    'ami_password' => $values['voip_asterisk_password'],
    'system_cid_name' => $values['voip_asterisk_cid_name'],
    'system_cid_number' => $values['voip_asterisk_cid_number'],
  );
  $result = _voip_asterisk_ping($server_config);
*****/
  $result = _voip_asterisk_ping($values);

  if(voip_error()){
    form_set_error('', t('An Asterisk Manager error occurred: @error', array('@error' => voip_error_message())));
  }
}

/**
 * Callback for sending requests to the Asterisk server
 */
function voip_asterisk_send($request_id, $options) {
  $server = voip_servers('server', 'asterisk');
  $config = $server['configuration'];
  $result =  voip_asterisk_send_request($config, $request_id, $options);
  return $result;
}

/**
 * Sends a request to the Asterisk Manager API (AMI) associated with the current Asterisk server
 */
function voip_asterisk_send_request($server_config, $request_id, $options) {

  switch($request_id) {
    default:
      // Invalid request id
      $response = FALSE;
      $error_message = "Invalid request id received: %request_id.";
      $variables = array('%request_id' => $request_id);
      watchdog('voip_asterisk', $error_message, $variables, WATCHDOG_ERROR);
      voip_error("(asterisk server) Invalid request id received: " . $request_id);
      break;

    case 'voip_dial_out': // dial the given call node
      // call node
      $call_node = (object)$options;
      $response = _voip_asterisk_dial_out($server_config, $call_node);
      break;
  }

  return $response;
}


/**
 * Implementation of hook_voip_process_request().
 *
 * TODO: This function has been added here for test purposes only!!!
 */
function voip_asterisk_voip_process_request($request_id, $options) {
  $response = NULL;

  switch($request_id) {
    case 'voip_dial_out':
      $server = voip_servers('server', 'asterisk');
      $config = $server['configuration'];
      $response['result'] = voip_asterisk_send_request($config, $request_id, $options);
      break;
  }

  return $response;
}


